{"version":3,"sources":["../src/datasource.js"],"names":["_","GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","q","options","query","buildQueryParameters","targets","filter","t","hide","length","when","data","me","datasourceRequest","host","service","perflabel","Number","range","from","toDate","getTime","toFixed","to","method","headers","then","result","dataQueryMapper","alias","datapoints","response","status","message","title","interpolated","replace","mapper","mapToTextValueHost","mapToTextValueService","mapToTextValuePerflabel","map","hosts","d","i","text","value","services","labels","target","refId"],"mappings":";;;;;;;;;;;;;;;AAAOA,O;;;;;;;;;;;;;;;;;;;;;mCAEMC,iB;AAEX,mCAAYC,gBAAZ,EAA8BC,EAA9B,EAAkCC,UAAlC,EAA8CC,WAA9C,EAA2D;AAAA;;AACzD,eAAKC,IAAL,GAAYJ,iBAAiBI,IAA7B;AACA,eAAKC,GAAL,GAAWL,iBAAiBK,GAA5B;AACA,eAAKC,IAAL,GAAYN,iBAAiBM,IAA7B;AACA,eAAKC,CAAL,GAASN,EAAT;AACA,eAAKC,UAAL,GAAkBA,UAAlB;AACA,eAAKC,WAAL,GAAmBA,WAAnB;AACD;;;;gCAEKK,O,EAAS;AACb,gBAAIC,QAAQ,KAAKC,oBAAL,CAA0BF,OAA1B,CAAZ;AACAC,kBAAME,OAAN,GAAgBF,MAAME,OAAN,CAAcC,MAAd,CAAqB;AAAA,qBAAK,CAACC,EAAEC,IAAR;AAAA,aAArB,CAAhB;;AAEA,gBAAIL,MAAME,OAAN,CAAcI,MAAd,IAAwB,CAA5B,EAA+B;AAC7B,qBAAO,KAAKR,CAAL,CAAOS,IAAP,CAAY,EAACC,MAAM,EAAP,EAAZ,CAAP;AACD;;AAED,gBAAIC,KAAK,IAAT;AACA,mBAAO,KAAKhB,UAAL,CAAgBiB,iBAAhB,CAAkC;AACvCd,mBAAK,KAAKA,GAAL,GAAW,yBAAX,GAAqCG,QAAQG,OAAR,CAAgB,CAAhB,EAAmBS,IAAxD,GAA6D,GAA7D,GAAiEZ,QAAQG,OAAR,CAAgB,CAAhB,EAAmBU,OAApF,GAA4F,GAA5F,GAAgGb,QAAQG,OAAR,CAAgB,CAAhB,EAAmBW,SAAnH,GACkC,SADlC,GAC4CC,OAAOf,QAAQgB,KAAR,CAAcC,IAAd,CAAmBC,MAAnB,GAA4BC,OAA5B,KAAsC,IAA7C,EAAmDC,OAAnD,EAD5C,GAEkC,OAFlC,GAE0CL,OAAOf,QAAQgB,KAAR,CAAcK,EAAd,CAAiBH,MAAjB,GAA0BC,OAA1B,KAAoC,IAA3C,EAAiDC,OAAjD,EAF1C,GAGkC,QAHlC,GAG2CpB,QAAQG,OAAR,CAAgB,CAAhB,EAAmBP,IAJ5B;AAKvC0B,sBAAQ,MAL+B;AAMvCC,uBAAS,EAAE,gBAAgB,kBAAlB;AAN8B,aAAlC,EAOJC,IAPI,CAOC,UAASC,MAAT,EAAiB;AAAE,qBAAOf,GAAGgB,eAAH,CAAmBD,MAAnB,EAA2BzB,OAA3B,CAAP;AAA6C,aAPjE,CAAP;AAQD;;;0CAEeyB,M,EAAQzB,O,EAAS;AAC/B,gBAAI2B,QAAQ3B,QAAQG,OAAR,CAAgB,CAAhB,EAAmBW,SAA/B;AACA,gBAAGd,QAAQG,OAAR,CAAgB,CAAhB,EAAmBwB,KAAtB,EAA6B;AAC3BA,sBAAQ3B,QAAQG,OAAR,CAAgB,CAAhB,EAAmBwB,KAA3B;AACD;AACD,gBAAIlB,OAAO,EAACA,MAAK,CAAC;AAChB,0BAAUkB,KADM;AAEhB,8BAAcF,OAAOhB,IAAP,CAAY,CAAZ,EAAemB;AAFb,eAAD,CAAN,EAAX;AAIA,mBAAOnB,IAAP;AACD;;;2CAEgB;AACf,mBAAO,KAAKf,UAAL,CAAgBiB,iBAAhB,CAAkC;AACvCd,mBAAK,KAAKA,GAAL,GAAW,gBADuB;AAEvCyB,sBAAQ;AAF+B,aAAlC,EAGJE,IAHI,CAGC,oBAAY;AAClB,kBAAIK,SAASC,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,uBAAO,EAAEA,QAAQ,SAAV,EAAqBC,SAAS,wBAA9B,EAAwDC,OAAO,SAA/D,EAAP;AACD;AACF,aAPM,CAAP;AAQD;;;0CAEehC,O,EAASJ,I,EAAM;AAC7B,gBAAIqC,eAAe;AACjBrB,oBAAM,KAAKjB,WAAL,CAAiBuC,OAAjB,CAAyBlC,QAAQY,IAAjC,EAAuC,IAAvC,EAA6C,OAA7C;AADW,aAAnB;;AAIA,gBAAIuB,SAAS,KAAKC,kBAAlB;AACA,gBAAIvC,MAAS,KAAKA,GAAL,GAAW,sBAAxB;AACA,gBAAGD,QAAQ,SAAX,EAAsB;AACpBC,oBAAS,KAAKA,GAAL,GAAW,0BAAX,GAAsCG,QAAQY,IAAvD,EACAuB,SAAS,KAAKE,qBADd;AAED;AACD,gBAAGzC,QAAQ,WAAX,EAAwB;AACtBC,oBAAS,KAAKA,GAAL,GAAW,wBAAX,GAAoCG,QAAQY,IAA5C,GAAiD,GAAjD,GAAqDZ,QAAQa,OAAtE,EACAsB,SAAS,KAAKG,uBADd;AAED;;AAED,mBAAO,KAAK5C,UAAL,CAAgBiB,iBAAhB,CAAkC;AACvCd,mBAASA,GAD8B;AAEvCY,oBAASwB,YAF8B;AAGvCX,sBAAQ,MAH+B;AAIvCC,uBAAS,EAAE,gBAAgB,kBAAlB;AAJ8B,aAAlC,EAKJC,IALI,CAKCW,MALD,CAAP;AAMD;;;6CAEkBV,M,EAAQ;AACzB,mBAAOnC,EAAEiD,GAAF,CAAMd,OAAOhB,IAAP,CAAY+B,KAAlB,EAAyB,UAACC,CAAD,EAAIC,CAAJ,EAAU;AACxC,qBAAO,EAAEC,MAAMF,EAAE3C,IAAV,EAAgB8C,OAAOH,EAAE3C,IAAzB,EAAP;AACD,aAFM,CAAP;AAGD;;;gDAEqB2B,M,EAAQ;AAC5B,mBAAOnC,EAAEiD,GAAF,CAAMd,OAAOhB,IAAP,CAAYoC,QAAlB,EAA4B,UAACJ,CAAD,EAAIC,CAAJ,EAAU;AAC3C,qBAAO,EAAEC,MAAMF,EAAE3C,IAAV,EAAgB8C,OAAOH,EAAE3C,IAAzB,EAAP;AACD,aAFM,CAAP;AAGD;;;kDAEuB2B,M,EAAQ;AAC9B,mBAAOnC,EAAEiD,GAAF,CAAMd,OAAOhB,IAAP,CAAYqC,MAAlB,EAA0B,UAACL,CAAD,EAAIC,CAAJ,EAAU;AACzC,qBAAO,EAAEC,MAAMF,EAAE3C,IAAV,EAAgB8C,OAAOH,EAAE3C,IAAzB,EAAP;AACD,aAFM,CAAP;AAGD;;;+CAEoBE,O,EAAS;AAAA;;AAC5B;AACAA,oBAAQG,OAAR,GAAkBb,EAAEc,MAAF,CAASJ,QAAQG,OAAjB,EAA0B,kBAAU;AACpD,qBAAO4C,OAAOnC,IAAP,KAAgB,aAAvB;AACD,aAFiB,CAAlB;AAGAZ,oBAAQG,OAAR,GAAkBb,EAAEc,MAAF,CAASJ,QAAQG,OAAjB,EAA0B,kBAAU;AACpD,qBAAO4C,OAAOlC,OAAP,KAAmB,gBAA1B;AACD,aAFiB,CAAlB;AAGAb,oBAAQG,OAAR,GAAkBb,EAAEc,MAAF,CAASJ,QAAQG,OAAjB,EAA0B,kBAAU;AACpD,qBAAO4C,OAAOjC,SAAP,KAAqB,0BAA5B;AACD,aAFiB,CAAlB;;AAIA,gBAAIX,UAAUb,EAAEiD,GAAF,CAAMvC,QAAQG,OAAd,EAAuB,kBAAU;AAC7C,qBAAO;AACLS,sBAAM,MAAKjB,WAAL,CAAiBuC,OAAjB,CAAyBa,OAAOnC,IAAhC,CADD;AAELC,yBAAS,MAAKlB,WAAL,CAAiBuC,OAAjB,CAAyBa,OAAOlC,OAAhC,CAFJ;AAGLC,2BAAW,MAAKnB,WAAL,CAAiBuC,OAAjB,CAAyBa,OAAOjC,SAAhC,CAHN;AAILa,uBAAO,MAAKhC,WAAL,CAAiBuC,OAAjB,CAAyBa,OAAOpB,KAAhC,CAJF;AAKL/B,sBAAM,MAAKD,WAAL,CAAiBuC,OAAjB,CAAyBa,OAAOnD,IAAhC,CALD;AAMLoD,uBAAOD,OAAOC,KANT;AAOL1C,sBAAMyC,OAAOzC;AAPR,eAAP;AASD,aAVa,CAAd;;AAYAN,oBAAQG,OAAR,GAAkBA,OAAlB;;AAEA,mBAAOH,OAAP;AACD","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\n\nexport class GenericDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n  }\n\n  query(options) {\n    var query = this.buildQueryParameters(options);\n    query.targets = query.targets.filter(t => !t.hide);\n\n    if (query.targets.length <= 0) {\n      return this.q.when({data: []});\n    }\n\n    var me = this;\n    return this.backendSrv.datasourceRequest({\n      url: this.url + '/index.php/api/metrics/'+options.targets[0].host+'/'+options.targets[0].service+'/'+options.targets[0].perflabel\n                                            +'?start='+Number(options.range.from.toDate().getTime()/1000).toFixed()\n                                            +'&end='+Number(options.range.to.toDate().getTime()/1000).toFixed()\n                                            +'&type='+options.targets[0].type,\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' }\n    }).then(function(result) { return(me.dataQueryMapper(result, options)) });\n  }\n\n  dataQueryMapper(result, options) {\n    var alias = options.targets[0].perflabel;\n    if(options.targets[0].alias) {\n      alias = options.targets[0].alias;\n    }\n    var data = {data:[{\n      \"target\": alias,\n      \"datapoints\": result.data[0].datapoints\n    }]};\n    return(data);\n  }\n\n  testDatasource() {\n    return this.backendSrv.datasourceRequest({\n      url: this.url + '/index.php/api',\n      method: 'GET'\n    }).then(response => {\n      if (response.status === 200) {\n        return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n      }\n    });\n  }\n\n  metricFindQuery(options, type) {\n    var interpolated = {\n      host: this.templateSrv.replace(options.host, null, 'regex')\n    };\n\n    var mapper = this.mapToTextValueHost;\n    var url    = this.url + '/index.php/api/hosts';\n    if(type == \"service\") {\n      url    = this.url + '/index.php/api/services/'+options.host,\n      mapper = this.mapToTextValueService;\n    }\n    if(type == \"perflabel\") {\n      url    = this.url + '/index.php/api/labels/'+options.host+'/'+options.service,\n      mapper = this.mapToTextValuePerflabel;\n    }\n\n    return this.backendSrv.datasourceRequest({\n      url:     url,\n      data:    interpolated,\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' }\n    }).then(mapper);\n  }\n\n  mapToTextValueHost(result) {\n    return _.map(result.data.hosts, (d, i) => {\n      return { text: d.name, value: d.name };\n    });\n  }\n\n  mapToTextValueService(result) {\n    return _.map(result.data.services, (d, i) => {\n      return { text: d.name, value: d.name };\n    });\n  }\n\n  mapToTextValuePerflabel(result) {\n    return _.map(result.data.labels, (d, i) => {\n      return { text: d.name, value: d.name };\n    });\n  }\n\n  buildQueryParameters(options) {\n    //remove placeholder targets\n    options.targets = _.filter(options.targets, target => {\n      return target.host !== 'select host';\n    });\n    options.targets = _.filter(options.targets, target => {\n      return target.service !== 'select service';\n    });\n    options.targets = _.filter(options.targets, target => {\n      return target.perflabel !== 'select performance label';\n    });\n\n    var targets = _.map(options.targets, target => {\n      return {\n        host: this.templateSrv.replace(target.host),\n        service: this.templateSrv.replace(target.service),\n        perflabel: this.templateSrv.replace(target.perflabel),\n        alias: this.templateSrv.replace(target.alias),\n        type: this.templateSrv.replace(target.type),\n        refId: target.refId,\n        hide: target.hide\n      };\n    });\n\n    options.targets = targets;\n\n    return options;\n  }\n}\n"]}