{"version":3,"sources":["../src/datasource.js"],"names":["_","GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","fill","q","options","query","buildQueryParameters","targets","filter","t","hide","length","when","data","start","Number","range","from","toDate","getTime","toFixed","end","to","me","datasourceRequest","method","headers","then","result","dataQueryMapper","x","target","alias","perflabel","undefined","datapoints","y","push","response","status","message","title","interpolated","host","replace","mapper","mapToTextValueHost","mapToTextValueService","service","mapToTextValuePerflabel","map","hosts","d","i","text","value","services","labels","refId"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\n\nexport class GenericDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.fill = instanceSettings.fill;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n  }\n\n  query(options) {\n    var query = this.buildQueryParameters(options);\n    query.targets = query.targets.filter(t => !t.hide);\n\n    if (query.targets.length <= 0) {\n      return this.q.when({data: []});\n    }\n\n    query.start = Number(options.range.from.toDate().getTime() / 1000).toFixed();\n    query.end   = Number(options.range.to.toDate().getTime() / 1000).toFixed();\n\n    var me = this;\n    return this.backendSrv.datasourceRequest({\n      url: this.url + '/index.php/api/metrics',\n      data: query,\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' }\n    }).then(function(result) { return(me.dataQueryMapper(result, options)) });\n  }\n\n  dataQueryMapper(result, options) {\n    var data = {data:[]};\n    for(var x=0; x < result.data.targets.length; x++) {\n      var target = options.targets[x];\n      var alias = target.perflabel;\n      if(target.alias) {\n        alias = target.alias;\n      }\n      var fill = options.targets[x].fill;\n      if(fill != \"fill\") {\n        if(fill == \"zero\") { fill = 0; }\n        if(fill == \"gap\")  { fill = undefined; }\n        var datapoints = result.data.targets[x][0].datapoints;\n        var length     = datapoints.length;\n        for(var y=0; y<length; y++) {\n          if(datapoints[y][0] === null) {\n            datapoints[y][0] = fill;\n          }\n        }\n      }\n      data.data.push({\n        \"target\": alias,\n        \"datapoints\": result.data.targets[x][0].datapoints\n      });\n    }\n    return(data);\n  }\n\n  testDatasource() {\n    return this.backendSrv.datasourceRequest({\n      url: this.url + '/index.php/api',\n      method: 'GET'\n    }).then(response => {\n      if (response.status === 200) {\n        return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n      }\n    });\n  }\n\n  metricFindQuery(options, type) {\n    var interpolated = {\n      host: this.templateSrv.replace(options.host, null, 'regex')\n    };\n\n    var mapper = this.mapToTextValueHost;\n    var url    = this.url + '/index.php/api/hosts';\n    if(type == \"service\") {\n      url    = this.url + '/index.php/api/services/'+options.host,\n      mapper = this.mapToTextValueService;\n    }\n    if(type == \"perflabel\") {\n      url    = this.url + '/index.php/api/labels/'+options.host+'/'+options.service,\n      mapper = this.mapToTextValuePerflabel;\n    }\n\n    return this.backendSrv.datasourceRequest({\n      url:     url,\n      data:    interpolated,\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' }\n    }).then(mapper);\n  }\n\n  mapToTextValueHost(result) {\n    return _.map(result.data.hosts, (d, i) => {\n      return { text: d.name, value: d.name };\n    });\n  }\n\n  mapToTextValueService(result) {\n    return _.map(result.data.services, (d, i) => {\n      return { text: d.name, value: d.name };\n    });\n  }\n\n  mapToTextValuePerflabel(result) {\n    return _.map(result.data.labels, (d, i) => {\n      return { text: d.name, value: d.name };\n    });\n  }\n\n  buildQueryParameters(options) {\n    //remove placeholder targets\n    options.targets = _.filter(options.targets, target => {\n      return target.host !== 'select host';\n    });\n    options.targets = _.filter(options.targets, target => {\n      return target.service !== 'select service';\n    });\n    options.targets = _.filter(options.targets, target => {\n      return target.perflabel !== 'select performance label';\n    });\n\n    var targets = _.map(options.targets, target => {\n      return {\n        host: this.templateSrv.replace(target.host),\n        service: this.templateSrv.replace(target.service),\n        perflabel: this.templateSrv.replace(target.perflabel),\n        alias: this.templateSrv.replace(target.alias),\n        type: this.templateSrv.replace(target.type),\n        fill: this.templateSrv.replace(target.fill),\n        refId: target.refId,\n        hide: target.hide\n      };\n    });\n\n    options.targets = targets;\n\n    return options;\n  }\n}\n"]}