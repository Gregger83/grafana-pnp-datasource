{"version":3,"sources":["../src/datasource.js"],"names":["_","PNPDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","q","withCredentials","basicAuth","options","query","buildQueryParameters","targets","filter","t","hide","length","when","data","start","Number","range","from","toDate","getTime","toFixed","end","to","x","target","host","_fixup_regex","service","perflabel","This","requestOptions","_requestOptions","method","headers","datasourceRequest","then","result","dataQueryMapper","k","res","alias","scopedVars","tag_host","value","tag_service","tag_perflabel","tag_label","replace","datapoints","y","pop","fill","undefined","push","matches","match","values","split","join","response","status","message","title","mapper","mapToTextValueHost","mapToTextValueService","mapToTextValuePerflabel","variables","unshift","text","map","hosts","d","i","services","labels","refId","Authorization"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\n\nexport class PNPDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this.withCredentials = instanceSettings.withCredentials;\n    this.basicAuth = instanceSettings.basicAuth;\n  }\n\n  /* fetch pnp rrd data */\n  query(options) {\n    var query = this.buildQueryParameters(options);\n    query.targets = query.targets.filter(t => !t.hide);\n\n    if (query.targets.length <= 0) {\n      return this.q.when({data: []});\n    }\n\n    query.start = Number(options.range.from.toDate().getTime() / 1000).toFixed();\n    query.end   = Number(options.range.to.toDate().getTime() / 1000).toFixed();\n\n    /* fixup regex syntax in query targets */\n    for(var x=0; x<query.targets.length; x++) {\n      var target = query.targets[x];\n      target.host      = this._fixup_regex(target.host);\n      target.service   = this._fixup_regex(target.service);\n      target.perflabel = this._fixup_regex(target.perflabel);\n    }\n\n    var This = this;\n    var requestOptions = this._requestOptions({\n      url: this.url + '/index.php/api/metrics',\n      data: query,\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' }\n    });\n    return this.backendSrv.datasourceRequest(requestOptions)\n                          .then(function(result) {\n                            return(This.dataQueryMapper(result, options))\n                          });\n  }\n\n  /* maps the result data from pnp into grafana data format */\n  dataQueryMapper(result, options) {\n    var data = {data:[]};\n    for(var x=0; x < result.data.targets.length; x++) {\n      for(var k=0; k < result.data.targets[x].length; k++) {\n        var target = options.targets[x];\n        var res    = result.data.targets[x][k];\n        var alias = target.perflabel;\n        if(target.alias) {\n          alias = target.alias;\n          var scopedVars = {\n            tag_host      : {value: res.host},\n            tag_service   : {value: res.service},\n            tag_perflabel : {value: res.perflabel},\n            tag_label     : {value: res.perflabel}\n          };\n          alias = this.templateSrv.replace(alias, scopedVars);\n        }\n        var datapoints = res.datapoints;\n        var length     = datapoints.length;\n        // remove the last few \"null\" values from the series because the last value is quite often null\n        // and would break current value in legend tables\n        for(var y=1; y < 5; y++) {\n          if(length > y && datapoints[length-y][0] === null) {\n            datapoints.pop();\n          } else {\n            break;\n          }\n        }\n        var length = datapoints.length;\n        var fill   = options.targets[x].fill;\n        if(fill != \"fill\") {\n          if(fill == \"zero\") { fill = 0; }\n          if(fill == \"gap\")  { fill = undefined; }\n          for(var y=0; y<length; y++) {\n            if(datapoints[y][0] === null) {\n              datapoints[y][0] = fill;\n            }\n          }\n        }\n        data.data.push({\n          \"target\": alias,\n          \"datapoints\": datapoints\n        });\n      }\n    }\n    return(data);\n  }\n\n  /* convert list selection into regular expression\n   * in:  /^{a,b,c}$/\n   * out: /^(a|b|c)$/\n   */\n  _fixup_regex(value) {\n    var matches = value.match(/^\\/\\^\\{(.*)\\}\\$\\/$/);\n    if(!matches) { return(value); }\n    var values = matches[1].split(/,/);\n    return('/^('+values.join('|')+')$/');\n  }\n\n  testDatasource() {\n    var requestOptions = this._requestOptions({\n      url: this.url + '/index.php/api',\n      method: 'GET'\n    });\n    return this.backendSrv.datasourceRequest(requestOptions)\n      .then(response => {\n        if (response.status === 200) {\n          return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n        }\n      });\n  }\n\n  /* used from the query editor to get lists of objects of given type */\n  metricFindQuery(options, type) {\n    var This = this;\n    var mapper = this.mapToTextValueHost;\n    var url    = this.url + '/index.php/api/hosts';\n    var data   = {};\n    if(type == \"service\") {\n      url          = this.url + '/index.php/api/services/';\n      data.host    = this._fixup_regex(this.templateSrv.replace(options.host));\n      mapper       = this.mapToTextValueService;\n    }\n    if(type == \"perflabel\") {\n      url          = this.url + '/index.php/api/labels/';\n      data.host    = this._fixup_regex(this.templateSrv.replace(options.host));\n      data.service = this._fixup_regex(this.templateSrv.replace(options.service));\n      mapper       = this.mapToTextValuePerflabel;\n    }\n\n    var requestOptions = this._requestOptions({\n      url:     url,\n      data:    data,\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' }\n    });\n    return this.backendSrv.datasourceRequest(requestOptions)\n      .then(mapper)\n      .then(function(data) {\n        /* prepend templating variables */\n        for(var x=0; x<This.templateSrv.variables.length; x++) {\n          data.unshift({ text:  '/^$'+This.templateSrv.variables[x].name+'$/',\n                         value: '/^$'+This.templateSrv.variables[x].name+'$/' });\n        }\n        return(data);\n      });\n  }\n\n  mapToTextValueHost(result) {\n    return _.map(result.data.hosts, (d, i) => {\n      return { text: d.name, value: d.name };\n    });\n  }\n\n  mapToTextValueService(result) {\n    return _.map(result.data.services, (d, i) => {\n      return { text: d.name, value: d.name };\n    });\n  }\n\n  mapToTextValuePerflabel(result) {\n    return _.map(result.data.labels, (d, i) => {\n      return { text: d.name, value: d.name };\n    });\n  }\n\n  buildQueryParameters(options) {\n    //remove placeholder targets\n    options.targets = _.filter(options.targets, target => {\n      return target.host !== 'select host';\n    });\n    options.targets = _.filter(options.targets, target => {\n      return target.service !== 'select service';\n    });\n    options.targets = _.filter(options.targets, target => {\n      return target.perflabel !== 'select performance label';\n    });\n\n    var targets = _.map(options.targets, target => {\n      return {\n        host: this.templateSrv.replace(target.host),\n        service: this.templateSrv.replace(target.service),\n        perflabel: this.templateSrv.replace(target.perflabel),\n        alias: this.templateSrv.replace(target.alias),\n        type: this.templateSrv.replace(target.type),\n        fill: this.templateSrv.replace(target.fill),\n        refId: target.refId,\n        hide: target.hide\n      };\n    });\n\n    options.targets = targets;\n\n    return options;\n  }\n\n  _requestOptions(options) {\n    options = options || {};\n    options.headers = options.headers || {};\n    if(this.basicAuth || this.withCredentials) {\n      options.withCredentials = true;\n    }\n    if(this.basicAuth) {\n      options.headers.Authorization = this.basicAuth;\n    }\n    return(options);\n  }\n}\n"]}