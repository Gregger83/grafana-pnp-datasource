{"version":3,"sources":["../src/datasource.js"],"names":["_","GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","q","options","query","buildQueryParameters","targets","filter","t","hide","length","when","data","start","range","from","toDate","getTime","end","to","datasourceRequest","method","headers","then","result","me","dataQueryMapper","x","target","alias","perflabel","push","datapoints","response","status","message","title","interpolated","host","replace","mapper","mapToTextValueHost","mapToTextValueService","service","mapToTextValuePerflabel","map","hosts","d","i","text","value","services","labels","refId"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\n\nexport class GenericDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n  }\n\n  query(options) {\n    var query = this.buildQueryParameters(options);\n    query.targets = query.targets.filter(t => !t.hide);\n\n    if (query.targets.length <= 0) {\n      return this.q.when({data: []});\n    }\n\n    query.start = options.range.from.toDate().getTime();\n    query.end   = options.range.to.toDate().getTime();\n\n    return this.backendSrv.datasourceRequest({\n      url: this.url + '/index.php/api/metrics',\n      data: query,\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' }\n    }).then(function(result) { return(me.dataQueryMapper(result, options)) });\n  }\n\n  dataQueryMapper(result, options) {\n    var data = {data:[]};\n    for(var x=0; x < result.data.targets.length; x++) {\n      var target = options[x].target;\n      var alias = target.perflabel;\n      if(target.alias) {\n        alias = target.alias;\n      }\n      data.data.push({\n        \"target\": alias,\n        \"datapoints\": result.data.targets[x][0].datapoints\n      });\n    }\n    return(data);\n  }\n\n  testDatasource() {\n    return this.backendSrv.datasourceRequest({\n      url: this.url + '/index.php/api',\n      method: 'GET'\n    }).then(response => {\n      if (response.status === 200) {\n        return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n      }\n    });\n  }\n\n  metricFindQuery(options, type) {\n    var interpolated = {\n      host: this.templateSrv.replace(options.host, null, 'regex')\n    };\n\n    var mapper = this.mapToTextValueHost;\n    var url    = this.url + '/index.php/api/hosts';\n    if(type == \"service\") {\n      url    = this.url + '/index.php/api/services/'+options.host,\n      mapper = this.mapToTextValueService;\n    }\n    if(type == \"perflabel\") {\n      url    = this.url + '/index.php/api/labels/'+options.host+'/'+options.service,\n      mapper = this.mapToTextValuePerflabel;\n    }\n\n    return this.backendSrv.datasourceRequest({\n      url:     url,\n      data:    interpolated,\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' }\n    }).then(mapper);\n  }\n\n  mapToTextValueHost(result) {\n    return _.map(result.data.hosts, (d, i) => {\n      return { text: d.name, value: d.name };\n    });\n  }\n\n  mapToTextValueService(result) {\n    return _.map(result.data.services, (d, i) => {\n      return { text: d.name, value: d.name };\n    });\n  }\n\n  mapToTextValuePerflabel(result) {\n    return _.map(result.data.labels, (d, i) => {\n      return { text: d.name, value: d.name };\n    });\n  }\n\n  buildQueryParameters(options) {\n    //remove placeholder targets\n    options.targets = _.filter(options.targets, target => {\n      return target.host !== 'select host';\n    });\n    options.targets = _.filter(options.targets, target => {\n      return target.service !== 'select service';\n    });\n    options.targets = _.filter(options.targets, target => {\n      return target.perflabel !== 'select performance label';\n    });\n\n    var targets = _.map(options.targets, target => {\n      return {\n        host: this.templateSrv.replace(target.host),\n        service: this.templateSrv.replace(target.service),\n        perflabel: this.templateSrv.replace(target.perflabel),\n        alias: this.templateSrv.replace(target.alias),\n        type: this.templateSrv.replace(target.type),\n        refId: target.refId,\n        hide: target.hide\n      };\n    });\n\n    options.targets = targets;\n\n    return options;\n  }\n}\n"]}