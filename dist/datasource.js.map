{"version":3,"sources":["../src/datasource.js"],"names":["_","GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","q","options","console","log","query","buildQueryParameters","targets","filter","t","hide","length","when","data","datasourceRequest","method","headers","then","response","status","message","title","interpolated","host","replace","search","mapper","mapToTextValueHost","mapToTextValueService","mapToTextValuePerflabel","result","map","d","i","text","hostname","value","servicedesc","ds_name","target","service","perflabel","refId"],"mappings":";;;;;;;;;;;;;;;AAAOA,O;;;;;;;;;;;;;;;;;;;;;mCAEMC,iB;AAEX,mCAAYC,gBAAZ,EAA8BC,EAA9B,EAAkCC,UAAlC,EAA8CC,WAA9C,EAA2D;AAAA;;AACzD,eAAKC,IAAL,GAAYJ,iBAAiBI,IAA7B;AACA,eAAKC,GAAL,GAAWL,iBAAiBK,GAA5B;AACA,eAAKC,IAAL,GAAYN,iBAAiBM,IAA7B;AACA,eAAKC,CAAL,GAASN,EAAT;AACA,eAAKC,UAAL,GAAkBA,UAAlB;AACA,eAAKC,WAAL,GAAmBA,WAAnB;AACD;;;;gCAEKK,O,EAAS;AACjBC,oBAAQC,GAAR,CAAY,OAAZ;AACAD,oBAAQC,GAAR,CAAYF,OAAZ;AACI,gBAAIG,QAAQ,KAAKC,oBAAL,CAA0BJ,OAA1B,CAAZ;AACAG,kBAAME,OAAN,GAAgBF,MAAME,OAAN,CAAcC,MAAd,CAAqB;AAAA,qBAAK,CAACC,EAAEC,IAAR;AAAA,aAArB,CAAhB;;AAEA,gBAAIL,MAAME,OAAN,CAAcI,MAAd,IAAwB,CAA5B,EAA+B;AAC7B,qBAAO,KAAKV,CAAL,CAAOW,IAAP,CAAY,EAACC,MAAM,EAAP,EAAZ,CAAP;AACD;;AAED,mBAAO,KAAKjB,UAAL,CAAgBkB,iBAAhB,CAAkC;AACvCf,mBAAK,KAAKA,GAAL,GAAW,iBADuB;AAEvCc,oBAAMR,KAFiC;AAGvCU,sBAAQ,MAH+B;AAIvCC,uBAAS,EAAE,gBAAgB,kBAAlB;AAJ8B,aAAlC,CAAP;AAMD;;;2CAEgB;AACf,mBAAO,KAAKpB,UAAL,CAAgBkB,iBAAhB,CAAkC;AACvCf,mBAAK,KAAKA,GAAL,GAAW,iBADuB;AAEvCgB,sBAAQ;AAF+B,aAAlC,EAGJE,IAHI,CAGC,oBAAY;AAClB,kBAAIC,SAASC,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,uBAAO,EAAEA,QAAQ,SAAV,EAAqBC,SAAS,wBAA9B,EAAwDC,OAAO,SAA/D,EAAP;AACD;AACF,aAPM,CAAP;AAQD;;;0CAEenB,O,EAASJ,I,EAAM;AAC7B,gBAAIwB,eAAe;AACjBC,oBAAM,KAAK1B,WAAL,CAAiB2B,OAAjB,CAAyBtB,QAAQqB,IAAjC,EAAuC,IAAvC,EAA6C,OAA7C;AADW,aAAnB;;AAIA,gBAAIE,SAAS,EAAb;AACA,gBAAIC,SAAS,KAAKC,kBAAlB;AACA,gBAAG7B,QAAQ,SAAX,EAAsB;AACpB2B,uBAAS,WAASvB,QAAQqB,IAA1B;AACAG,uBAAS,KAAKE,qBAAd;AACD;AACD,gBAAG9B,QAAQ,WAAX,EAAwB;AACtB2B,uBAAS,WAASvB,QAAQqB,IAA1B;AACAG,uBAAS,KAAKG,uBAAd;AACD;;AAED,mBAAO,KAAKjC,UAAL,CAAgBkB,iBAAhB,CAAkC;AACvCf,mBAAK,KAAKA,GAAL,GAAW,iBAAX,GAA6B0B,MADK;AAEvCZ,oBAAMS,YAFiC;AAGvCP,sBAAQ,MAH+B;AAIvCC,uBAAS,EAAE,gBAAgB,kBAAlB;AAJ8B,aAAlC,EAKJC,IALI,CAKCS,MALD,CAAP;AAMD;;;6CAEkBI,M,EAAQ;AACzB,mBAAOtC,EAAEuC,GAAF,CAAMD,OAAOjB,IAAb,EAAmB,UAACmB,CAAD,EAAIC,CAAJ,EAAU;AAClC,qBAAO,EAAEC,MAAMF,EAAEG,QAAV,EAAoBC,OAAOJ,EAAEG,QAA7B,EAAP;AACD,aAFM,CAAP;AAGD;;;gDAEqBL,M,EAAQ;AAC5B,mBAAOtC,EAAEuC,GAAF,CAAMD,OAAOjB,IAAb,EAAmB,UAACmB,CAAD,EAAIC,CAAJ,EAAU;AAClC,qBAAO,EAAEC,MAAMF,EAAEK,WAAV,EAAuBD,OAAOJ,EAAEK,WAAhC,EAAP;AACD,aAFM,CAAP;AAGD;;;kDAEuBP,M,EAAQ;AAC9B,mBAAOtC,EAAEuC,GAAF,CAAMD,OAAOjB,IAAb,EAAmB,UAACmB,CAAD,EAAIC,CAAJ,EAAU;AAClC,qBAAO,EAAEC,MAAMF,EAAEM,OAAV,EAAmBF,OAAOJ,EAAEM,OAA5B,EAAP;AACD,aAFM,CAAP;AAGD;;;+CAEoBpC,O,EAAS;AAAA;;AAC5B;AACAA,oBAAQK,OAAR,GAAkBf,EAAEgB,MAAF,CAASN,QAAQK,OAAjB,EAA0B,kBAAU;AACpD,qBAAOgC,OAAOhB,IAAP,KAAgB,aAAvB;AACD,aAFiB,CAAlB;AAGArB,oBAAQK,OAAR,GAAkBf,EAAEgB,MAAF,CAASN,QAAQK,OAAjB,EAA0B,kBAAU;AACpD,qBAAOgC,OAAOC,OAAP,KAAmB,gBAA1B;AACD,aAFiB,CAAlB;AAGAtC,oBAAQK,OAAR,GAAkBf,EAAEgB,MAAF,CAASN,QAAQK,OAAjB,EAA0B,kBAAU;AACpD,qBAAOgC,OAAOE,SAAP,KAAqB,0BAA5B;AACD,aAFiB,CAAlB;;AAIA,gBAAIlC,UAAUf,EAAEuC,GAAF,CAAM7B,QAAQK,OAAd,EAAuB,kBAAU;AAC7C,qBAAO;AACLgB,sBAAM,MAAK1B,WAAL,CAAiB2B,OAAjB,CAAyBe,OAAOhB,IAAhC,CADD;AAELiB,yBAAS,MAAK3C,WAAL,CAAiB2B,OAAjB,CAAyBe,OAAOC,OAAhC,CAFJ;AAGLC,2BAAW,MAAK5C,WAAL,CAAiB2B,OAAjB,CAAyBe,OAAOE,SAAhC,CAHN;AAILC,uBAAOH,OAAOG,KAJT;AAKLhC,sBAAM6B,OAAO7B;AALR,eAAP;AAOD,aARa,CAAd;;AAUAR,oBAAQK,OAAR,GAAkBA,OAAlB;;AAEA,mBAAOL,OAAP;AACD","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\n\nexport class GenericDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n  }\n\n  query(options) {\nconsole.log(\"query\");\nconsole.log(options);\n    var query = this.buildQueryParameters(options);\n    query.targets = query.targets.filter(t => !t.hide);\n\n    if (query.targets.length <= 0) {\n      return this.q.when({data: []});\n    }\n\n    return this.backendSrv.datasourceRequest({\n      url: this.url + '/index.php/json',\n      data: query,\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' }\n    });\n  }\n\n  testDatasource() {\n    return this.backendSrv.datasourceRequest({\n      url: this.url + '/index.php/json',\n      method: 'GET'\n    }).then(response => {\n      if (response.status === 200) {\n        return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n      }\n    });\n  }\n\n  metricFindQuery(options, type) {\n    var interpolated = {\n      host: this.templateSrv.replace(options.host, null, 'regex')\n    };\n\n    var search = \"\";\n    var mapper = this.mapToTextValueHost;\n    if(type == \"service\") {\n      search = '?host='+options.host;\n      mapper = this.mapToTextValueService;\n    }\n    if(type == \"perflabel\") {\n      search = '?host='+options.host;\n      mapper = this.mapToTextValuePerflabel;\n    }\n\n    return this.backendSrv.datasourceRequest({\n      url: this.url + '/index.php/json'+search,\n      data: interpolated,\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' }\n    }).then(mapper);\n  }\n\n  mapToTextValueHost(result) {\n    return _.map(result.data, (d, i) => {\n      return { text: d.hostname, value: d.hostname};\n    });\n  }\n\n  mapToTextValueService(result) {\n    return _.map(result.data, (d, i) => {\n      return { text: d.servicedesc, value: d.servicedesc};\n    });\n  }\n\n  mapToTextValuePerflabel(result) {\n    return _.map(result.data, (d, i) => {\n      return { text: d.ds_name, value: d.ds_name};\n    });\n  }\n\n  buildQueryParameters(options) {\n    //remove placeholder targets\n    options.targets = _.filter(options.targets, target => {\n      return target.host !== 'select host';\n    });\n    options.targets = _.filter(options.targets, target => {\n      return target.service !== 'select service';\n    });\n    options.targets = _.filter(options.targets, target => {\n      return target.perflabel !== 'select performance label';\n    });\n\n    var targets = _.map(options.targets, target => {\n      return {\n        host: this.templateSrv.replace(target.host),\n        service: this.templateSrv.replace(target.service),\n        perflabel: this.templateSrv.replace(target.perflabel),\n        refId: target.refId,\n        hide: target.hide\n      };\n    });\n\n    options.targets = targets;\n\n    return options;\n  }\n}\n"]}