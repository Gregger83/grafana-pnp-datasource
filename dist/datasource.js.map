{"version":3,"sources":["../src/datasource.js"],"names":["_","GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","q","options","query","buildQueryParameters","targets","filter","t","hide","length","when","data","me","datasourceRequest","host","service","Number","range","from","toDate","getTime","toFixed","to","method","headers","then","result","dataQueryMapper","console","log","index","datapoints","timestamp","meta","start","step","x","row","push","v","response","status","message","title","interpolated","replace","search","mapper","mapToTextValueHost","mapToTextValueService","mapToTextValuePerflabel","map","d","i","text","hostname","value","servicedesc","ds_name","target","perflabel","refId"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\n\nexport class GenericDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n  }\n\n  query(options) {\n//console.log(\"query\");\n//console.log(options);\n    var query = this.buildQueryParameters(options);\n    query.targets = query.targets.filter(t => !t.hide);\n\n    if (query.targets.length <= 0) {\n      return this.q.when({data: []});\n    }\n\n    var me = this;\n    return this.backendSrv.datasourceRequest({\n      url: this.url + '/index.php/xport/json?host='+options.targets[0].host\n                                            +'&srv='+options.targets[0].service\n                                            +'&start='+Number(options.range.from.toDate().getTime()/1000).toFixed()\n                                            +'&end='+Number(options.range.to.toDate().getTime()/1000).toFixed(),\n      //data: query,\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' }\n    }).then(function(result) { return(me.dataQueryMapper(result, options)) });\n  }\n\n  dataQueryMapper(result, options) {\nconsole.log(\"dataQueryMapper\");\nconsole.log(options);\nconsole.log(result);\n    var index      = 0;\n    var datapoints = [];\n    var timestamp  = Number(result.data.meta.start);\n    var step       = Number(result.data.meta.step);\n    for(var x=0; x < result.data.data.row.length; x++) {\n      datapoints.push([Number(result.data.data.row[x].v[index]),timestamp*1000]);\n      timestamp += step;\n    }\n\n    var data = {data:[{\n      \"target\": options.targets[0].host+';'+options.targets[0].service,\n      \"datapoints\": datapoints\n    }]};\nconsole.log(data);\n    return(data);\n  }\n\n  testDatasource() {\n    return this.backendSrv.datasourceRequest({\n      url: this.url + '/index.php/json',\n      method: 'GET'\n    }).then(response => {\n      if (response.status === 200) {\n        return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n      }\n    });\n  }\n\n  metricFindQuery(options, type) {\n    var interpolated = {\n      host: this.templateSrv.replace(options.host, null, 'regex')\n    };\n\n    var search = \"\";\n    var mapper = this.mapToTextValueHost;\n    if(type == \"service\") {\n      search = '?host='+options.host;\n      mapper = this.mapToTextValueService;\n    }\n    if(type == \"perflabel\") {\n      search = '?host='+options.host;\n      mapper = this.mapToTextValuePerflabel;\n    }\n\n    return this.backendSrv.datasourceRequest({\n      url: this.url + '/index.php/json'+search,\n      data: interpolated,\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' }\n    }).then(mapper);\n  }\n\n  mapToTextValueHost(result) {\n    return _.map(result.data, (d, i) => {\n      return { text: d.hostname, value: d.hostname};\n    });\n  }\n\n  mapToTextValueService(result) {\n    return _.map(result.data, (d, i) => {\n      return { text: d.servicedesc, value: d.servicedesc};\n    });\n  }\n\n  mapToTextValuePerflabel(result) {\n    return _.map(result.data, (d, i) => {\n      return { text: d.ds_name, value: d.ds_name};\n    });\n  }\n\n  buildQueryParameters(options) {\n    //remove placeholder targets\n    options.targets = _.filter(options.targets, target => {\n      return target.host !== 'select host';\n    });\n    options.targets = _.filter(options.targets, target => {\n      return target.service !== 'select service';\n    });\n    options.targets = _.filter(options.targets, target => {\n      return target.perflabel !== 'select performance label';\n    });\n\n    var targets = _.map(options.targets, target => {\n      return {\n        host: this.templateSrv.replace(target.host),\n        service: this.templateSrv.replace(target.service),\n        perflabel: this.templateSrv.replace(target.perflabel),\n        refId: target.refId,\n        hide: target.hide,\n        target: target.host+';'+target.service\n      };\n    });\n\n    options.targets = targets;\n\n    return options;\n  }\n}\n"]}